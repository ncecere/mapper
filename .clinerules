# .cursorrules
version: "1.1"
description: "Rules and best practices for building Go CLI applications"

tools:
  cobra: true       # Use Cobra for command & subcommand management
  viper: true       # Use Viper for configuration management (config files, env vars, etc.)
  charm: true       # Use Charm libraries (e.g. charmbracelet/bubbletea or lipgloss) for enhanced terminal UIs

file_constraints:
  min_lines: 100    # Each Go source file should have at least 100 lines
  max_lines: 200    # and no more than 200 lines to maintain readability and modularity

project_structure:
  - "Place each CLI command in its own file under the cmd/ directory."
  - "Separate core business logic (pkg/) from CLI parsing logic (cmd/)."
  - "Keep configuration (using Viper) and UI-related code (using Charm) modular."

documentation_guidelines:
  - "Document all exported functions, types, and packages using GoDoc-style comments."
  - "Maintain a detailed README that covers installation, usage, examples, and troubleshooting."
  - "Leverage Cobra’s auto-generated help and man page capabilities, then supplement with additional examples where needed."
  - "Keep inline comments clear and consistent to aid maintainability and onboarding of new contributors."
  - "Use markdown or similar formats for extended documentation and changelogs."

error_handling:
  - "Always check and handle errors returned from functions, especially I/O, network, and external calls."
  - "Wrap errors with context (e.g. using fmt.Errorf or errors.Wrap) so that issues can be diagnosed easily."
  - "Log errors with sufficient detail while avoiding exposure of sensitive information."
  - "Return meaningful exit codes: zero for success and non-zero for failure conditions."
  - "Use structured logging where possible to make error reports machine-parsable and easier to analyze."
  - "Provide clear, user-friendly error messages in CLI output to guide end users in troubleshooting."

best_practices:
  - "Follow idiomatic Go practices: use go fmt, go vet, and linters (e.g. golangci-lint)."
  - "Keep functions small and focused—avoid mixing concerns."
  - "Utilize context for cancellation and timeouts in long-running commands."
  - "Employ dependency injection to enhance testability and maintainability."
  - "Maintain comprehensive unit tests for all nontrivial logic."
  - "Manage dependencies with Go modules and update them regularly."
  - "Use semantic versioning and maintain a proper changelog for releases."

notes: >
  This set of rules is intended to enforce consistency, maintainability, and ease of collaboration.
  Adjust and expand these guidelines as your project evolves and as you adopt new best practices.
